// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package randomdatastream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RandomDataStreamerClient is the client API for RandomDataStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomDataStreamerClient interface {
	GetRandomDataStream(ctx context.Context, in *GetRandomDataStreamRequest, opts ...grpc.CallOption) (RandomDataStreamer_GetRandomDataStreamClient, error)
}

type randomDataStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomDataStreamerClient(cc grpc.ClientConnInterface) RandomDataStreamerClient {
	return &randomDataStreamerClient{cc}
}

func (c *randomDataStreamerClient) GetRandomDataStream(ctx context.Context, in *GetRandomDataStreamRequest, opts ...grpc.CallOption) (RandomDataStreamer_GetRandomDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RandomDataStreamer_serviceDesc.Streams[0], "/randomdatastream.RandomDataStreamer/GetRandomDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomDataStreamerGetRandomDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomDataStreamer_GetRandomDataStreamClient interface {
	Recv() (*GetRandomDataStreamResponse, error)
	grpc.ClientStream
}

type randomDataStreamerGetRandomDataStreamClient struct {
	grpc.ClientStream
}

func (x *randomDataStreamerGetRandomDataStreamClient) Recv() (*GetRandomDataStreamResponse, error) {
	m := new(GetRandomDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomDataStreamerServer is the server API for RandomDataStreamer service.
// All implementations must embed UnimplementedRandomDataStreamerServer
// for forward compatibility
type RandomDataStreamerServer interface {
	GetRandomDataStream(*GetRandomDataStreamRequest, RandomDataStreamer_GetRandomDataStreamServer) error
	mustEmbedUnimplementedRandomDataStreamerServer()
}

// UnimplementedRandomDataStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedRandomDataStreamerServer struct {
}

func (UnimplementedRandomDataStreamerServer) GetRandomDataStream(*GetRandomDataStreamRequest, RandomDataStreamer_GetRandomDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRandomDataStream not implemented")
}
func (UnimplementedRandomDataStreamerServer) mustEmbedUnimplementedRandomDataStreamerServer() {}

// UnsafeRandomDataStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomDataStreamerServer will
// result in compilation errors.
type UnsafeRandomDataStreamerServer interface {
	mustEmbedUnimplementedRandomDataStreamerServer()
}

func RegisterRandomDataStreamerServer(s grpc.ServiceRegistrar, srv RandomDataStreamerServer) {
	s.RegisterService(&_RandomDataStreamer_serviceDesc, srv)
}

func _RandomDataStreamer_GetRandomDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRandomDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomDataStreamerServer).GetRandomDataStream(m, &randomDataStreamerGetRandomDataStreamServer{stream})
}

type RandomDataStreamer_GetRandomDataStreamServer interface {
	Send(*GetRandomDataStreamResponse) error
	grpc.ServerStream
}

type randomDataStreamerGetRandomDataStreamServer struct {
	grpc.ServerStream
}

func (x *randomDataStreamerGetRandomDataStreamServer) Send(m *GetRandomDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RandomDataStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "randomdatastream.RandomDataStreamer",
	HandlerType: (*RandomDataStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRandomDataStream",
			Handler:       _RandomDataStreamer_GetRandomDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "randomdatastream.proto",
}
